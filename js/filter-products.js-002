document.addEventListener("DOMContentLoaded", function () {
  let form = document.querySelector("#product-filter-form");
  let productResults = document.querySelector("#product-results");
  let productCount = document.querySelector("#product-count");
  let activeFilters = document.querySelector("#active-filters");

  // Use ajax_object.ajaxurl if available, otherwise fallback to global ajaxurl
  let ajaxUrl =
    typeof ajax_object !== "undefined"
      ? ajax_object.ajaxurl
      : typeof ajaxurl !== "undefined"
      ? ajaxurl
      : null;

  if (!ajaxUrl) {
    console.error(
      "AJAX URL is not defined. Check wp_localize_script or wp_add_inline_script in PHP."
    );
    return;
  }

  // Ensure clicking labels toggles checkboxes correctly
  form.querySelectorAll("label.form-check-label").forEach((label) => {
    label.addEventListener("click", function (event) {
      let checkbox = document.getElementById(label.getAttribute("for"));
      if (checkbox) {
        event.preventDefault(); // Prevent default label behavior
        checkbox.checked = !checkbox.checked;
        checkbox.dispatchEvent(new Event("change", { bubbles: true })); // Trigger change event
      }
    });
  });
  // ✅ Explicitly attach "change" event listener to checkboxes
  form.querySelectorAll("input[type='checkbox']").forEach((checkbox) => {
    checkbox.addEventListener("change", function () {
      updateProducts();
    });
  });

  // Function to update products dynamically
  function updateProducts() {
    productResults.innerHTML =
      '<p class="loading-message">Loading products...</p>'; // Show loading message
    productCount.innerHTML = "Loading products...";

    let formData = new FormData(form);

    fetch(ajaxUrl, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams(formData) + "&action=filter_products",
    })
      .then((response) => response.text())
      .then((data) => {
        let parser = new DOMParser();
        let doc = parser.parseFromString(data, "text/html");
        let products = doc.querySelectorAll(".product").length; // Count product elements

        productCount.innerHTML =
          products > 0 ? `${products} results found` : "No products found";

        productResults.innerHTML = data;
        updateActiveFilters();
      })
      .catch((error) => {
        console.error("Error fetching products:", error);
        productResults.innerHTML =
          '<p class="error-message">Failed to load products. Please try again.</p>';
        productCount.innerHTML = "Error loading products";
      });
  }

  function updateFilters() {
    let selectedCategories = Array.from(
      document.querySelectorAll(
        ".filter-group input[name='product_cat[]']:checked"
      )
    ).map((checkbox) => checkbox.value);

    let selectedTags = Array.from(
      document.querySelectorAll(
        ".filter-group input[name='product_tag[]']:checked"
      )
    ).map((checkbox) => checkbox.value);

    let categoryParam =
      selectedCategories.length > 0 ? selectedCategories.join(",") : "none";
    let tagParam = selectedTags.length > 0 ? selectedTags.join(",") : "none";

    fetch(ajaxUrl, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({
        action: "update_filters",
        selected_categories: categoryParam,
        selected_tags: tagParam,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        document
          .querySelectorAll(".filter-group input[name='product_cat[]']")
          .forEach((checkbox) => {
            checkbox.disabled = !data.categories.includes(checkbox.value);
          });

        document
          .querySelectorAll(".filter-group input[name='product_tag[]']")
          .forEach((checkbox) => {
            checkbox.disabled = !data.tags.includes(checkbox.value);
          });
      })
      .catch((error) => console.error("Error updating filters:", error));
  }

  function updateActiveFilters() {
    let selectedCategories = Array.from(
      form.querySelectorAll("input[name='product_cat[]']:checked")
    ).map((el) => el.nextElementSibling.textContent.trim());

    let selectedTags = Array.from(
      form.querySelectorAll("input[name='product_tag[]']:checked")
    ).map((el) => el.nextElementSibling.textContent.trim());

    let filtersHtml = "";

    if (selectedCategories.length > 0) {
      filtersHtml += `<strong>Categories:</strong> ${selectedCategories
        .map((cat) => `<span class="badge bg-primary">${cat}</span>`)
        .join(" ")}`;
    }
    if (selectedTags.length > 0) {
      filtersHtml += `<strong> Tags:</strong> ${selectedTags
        .map((tag) => `<span class="badge bg-secondary">${tag}</span>`)
        .join(" ")}`;
    }

    activeFilters.innerHTML = filtersHtml || "";
  }

  // Attach "change" event directly to checkboxes
  // Fix event handling for checkboxes and labels
  //   form.querySelectorAll("input[type='checkbox']").forEach((checkbox) => {
  //     checkbox.addEventListener("click", function (event) {
  //       console.log("Checkbox clicked:", this.name, "Checked:", this.checked);
  //       // Ensure change event fires properly
  //       this.dispatchEvent(new Event("change", { bubbles: true }));
  //     });

  //     checkbox.addEventListener("change", function () {
  //       console.log("Checkbox changed:", this.name, "Checked:", this.checked);
  //       updateProducts();
  //       setTimeout(updateFilters, 250);
  //     });
  //   });

  //   // Ensure labels toggle checkboxes correctly but don’t trigger duplicate events
  //   form.querySelectorAll("label.form-check-label").forEach((label) => {
  //     label.addEventListener("click", function (event) {
  //       let checkbox = document.getElementById(label.getAttribute("for"));
  //       if (checkbox) {
  //         event.preventDefault(); // Stop default action
  //         if (!event.detail || event.detail === 1) {
  //           // Prevent duplicate firing
  //           checkbox.checked = !checkbox.checked;
  //           checkbox.dispatchEvent(new Event("change", { bubbles: true }));
  //         }
  //       }
  //     });
  //   });

  // Trigger AJAX filtering on load
  updateProducts();

  //   let form = document.querySelector("#product-filter-form");

  // Log clicks on checkboxes
  form.querySelectorAll("input[type='checkbox']").forEach((checkbox) => {
    checkbox.addEventListener("change", function (event) {
      console.log("Checkbox changed:", this.name, "Checked:", this.checked);
      updateProducts();
      setTimeout(() => {
        updateFilters();
        updateActiveFilters(); // ✅ Ensure active filters are updated
      }, 250);
    });
  });

  // Log clicks on labels
  form.querySelectorAll("label.form-check-label").forEach((label) => {
    label.addEventListener("click", function (event) {
      let checkbox = document.getElementById(label.getAttribute("for"));
      if (checkbox) {
        event.preventDefault();
        checkbox.checked = !checkbox.checked;
        checkbox.dispatchEvent(new Event("change", { bubbles: true }));
      }
    });
  });
});
